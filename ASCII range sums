class Solution {
  public:
    vector<int> asciirange(string& s) {
        unordered_map<char, pair<int, int>> positions;
        vector<int> result;

        // Step 1: Store first and last index of each character
        for (int i = 0; i < s.size(); i++) {
            char ch = s[i];
            if (positions.find(ch) == positions.end()) {
                positions[ch] = {i, i};  // first time seeing character
            } else {
                positions[ch].second = i;  // update last position
            }
        }

        // Step 2: Calculate ASCII sum for characters with different first and last positions
        for (auto& entry : positions) {
            int first = entry.second.first;
            int last = entry.second.second;

            if (last > first + 1) {  // there are characters strictly between
                int sum = 0;
                for (int i = first + 1; i < last; i++) {
                    sum += (int)s[i];
                }
                if (sum != 0)
                    result.push_back(sum);
            }
        }

        return result;
    }
};
